{"version":3,"sources":["common/components/menu.tsx","common/components/header.tsx","index/components/content.tsx","index/App.tsx","reportWebVitals.ts","index.tsx"],"names":["menu","selectable","defaultSelectedKeys","items","key","type","label","children","HeaderMenu","overlay","Link","Header","className","style","color","Content","defaultTucao","useState","author","content","contentSnippet","creator","guid","isoDate","link","pubDate","title","active","data","setData","tucao","setTucao","tucaoShow","setTucaoShow","listMask","setListMask","init","setInit","sectionRef","useRef","useEffect","fetchComment","parser","Parser","parseURL","feed","window","addEventListener","e","current","contains","target","catch","err","console","log","newList","forEach","x","item","tucaoId","substring","lastIndexOf","fetch","tucaoRespon","json","error","hot_tucao","nData","map","activeData","find","ref","itemLayout","dataSource","renderItem","Item","onClick","itemClick","Meta","description","comment_author","comment_content","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"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","file":"static/js/main.606744c6.chunk.js","sourcesContent":["import { Dropdown, Menu, Space, Typography } from 'antd';\r\nconst menu = (\r\n    <Menu\r\n        selectable\r\n        defaultSelectedKeys={['jandan']}\r\n        items={[\r\n            {\r\n                key: 'jandan',\r\n                type: 'group',\r\n                label: '煎蛋',\r\n                children: [\r\n                    {\r\n                        key:'comments',\r\n                        label: '优评',\r\n                    }\r\n                ]\r\n            },\r\n        ]}\r\n    />\r\n);\r\n\r\n\r\n\r\nfunction HeaderMenu() {\r\n    return (\r\n        <Dropdown overlay={menu}>\r\n            <Typography.Link>\r\n                <Space>\r\n                    SPACE4FUN\r\n                </Space>\r\n            </Typography.Link>\r\n        </Dropdown>\r\n    );\r\n}\r\n\r\nexport default HeaderMenu;\r\n","import HeaderMenu from \"./menu\";\r\nfunction Header() {\r\n    return (\r\n        <div className={'header'}>\r\n            <div className={'headerL'}>\r\n                <HeaderMenu />\r\n            </div>\r\n\r\n            <div className=\"headerC\">\r\n                {/*<HeaderBreadcrumb />*/}\r\n                <span style={{color:\"white\"}}>主页/煎蛋/优评</span>\r\n            </div>\r\n\r\n            <div className=\"headerR\">\r\n\r\n            </div>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React, {useEffect, useRef, useState} from 'react';\r\nimport {List} from \"antd\";\r\nimport Parser from \"rss-parser\";\r\n\r\ntype tucao = {\r\n    \"comment_ID\": number,\r\n    \"comment_post_ID\": number,\r\n    \"comment_author\": string,\r\n    \"comment_date\": string,\r\n    \"comment_date_int\": number,\r\n    \"comment_content\": string,\r\n    \"comment_parent\": number,\r\n    \"comment_reply_ID\": number,\r\n    \"is_jandan_user\": number,\r\n    \"is_tip_user\": number,\r\n    \"vote_positive\": number,\r\n    \"vote_negative\": number,\r\n    \"sub_comment_count\": number,\r\n    \"images\": string | null,\r\n    \"ip_location\": string\r\n}\r\ntype comment = {\r\n    author: string,\r\n    content: string,\r\n    contentSnippet: string,\r\n    creator: string,\r\n    guid: string,\r\n    isoDate: string,\r\n    link: string,\r\n    pubDate: string,\r\n    title: string,\r\n    active: string,\r\n}\r\nfunction Content() {\r\n\r\n    const defaultData = [\r\n        {\r\n            author: \"loader\",\r\n            content: \"\",\r\n            contentSnippet: \"loading\",\r\n            creator: \"\",\r\n            guid: \"\",\r\n            isoDate: \"\",\r\n            link: \"\",\r\n            pubDate: \"\",\r\n            title: \"\",\r\n            active: '',\r\n        },\r\n    ]\r\n    const defaultTucao = [\r\n        {\r\n            \"comment_ID\": -1,\r\n            \"comment_post_ID\": -1,\r\n            \"comment_author\": \"\",\r\n            \"comment_date\": \"\",\r\n            \"comment_date_int\": -1,\r\n            \"comment_content\": \"\",\r\n            \"comment_parent\": -1,\r\n            \"comment_reply_ID\": -1,\r\n            \"is_jandan_user\": -1,\r\n            \"is_tip_user\": -1,\r\n            \"vote_positive\": -1,\r\n            \"vote_negative\": -1,\r\n            \"sub_comment_count\": -1,\r\n            \"images\": null,\r\n            \"ip_location\": \"\"\r\n        },\r\n    ]\r\n    const [data,setData] = useState<comment[]>(defaultData)\r\n    const [tucao,setTucao] = useState(defaultTucao)\r\n    const [tucaoShow,setTucaoShow] = useState('')\r\n    const [listMask,setListMask] = useState('')\r\n    const [init,setInit] = useState(false)\r\n    const sectionRef = useRef<HTMLDivElement>() as React.MutableRefObject<HTMLInputElement>;\r\n    useEffect(()=>{\r\n        const fetchComment = async () => {\r\n            const parser = new Parser();\r\n\r\n\r\n            const feed:any = await parser.parseURL('https://spac4fun.herokuapp.com/jandan/top-comments');\r\n            const data:comment[] = feed.items\r\n            setData(data)\r\n            window.addEventListener('click',(e)=> {\r\n                if(sectionRef !== null && sectionRef.current !== null && sectionRef.current && !sectionRef.current.contains(e.target as HTMLDivElement)){\r\n                    setListMask('');\r\n                    setTucaoShow('');\r\n                    setInit(true)\r\n                }\r\n            })\r\n        }\r\n\r\n\r\n        fetchComment().catch((err) => {\r\n            console.log(err)\r\n        })\r\n\r\n\r\n    },[])\r\n\r\n\r\n    if(init) {\r\n        const newList = [...data];\r\n        newList.forEach(x=>x.active = '');\r\n        setInit(false);\r\n        setData(newList);\r\n    }\r\n    async function itemClick(item:comment) {\r\n        // url \"http://i.jandan.net/t/5269905\"\r\n        // tucao api http://i.jandan.net/api/tucao/all/5269905\r\n        item.active = 'active';\r\n\r\n        const tucaoId = item.link.substring(item.link.lastIndexOf('/'));\r\n        let tucaoRespon;\r\n        let tucao;\r\n        try {\r\n            tucaoRespon = await fetch('https://tucao.space4fun.workers.dev' + tucaoId);\r\n            tucao = await tucaoRespon.json();\r\n        } catch (e) {\r\n            console.error(e);\r\n            tucao = defaultTucao;\r\n        }\r\n\r\n        setTucao(tucao.hot_tucao ?? tucao.tucao);\r\n        setTucaoShow('display-tucao');\r\n        setListMask('mask')\r\n\r\n        const nData = data.map(x => {\r\n            x.active = '';\r\n            return x\r\n        });\r\n        const activeData:comment | undefined = nData.find(x => x.guid === item.guid)\r\n        if(activeData) activeData.active = 'active'\r\n        setData(nData);\r\n\r\n\r\n    }\r\n\r\n    return (\r\n        <div  className={'content'}>\r\n\r\n            <div ref={sectionRef} className={'section'}>\r\n                <div className={\"list-main \"+tucaoShow}>\r\n                    <List\r\n                        className={'mainList '+ listMask}\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={data}\r\n                        renderItem={item => (\r\n                            <List.Item onClick={()=>itemClick(item)} className={'item '+ item.active}>\r\n                                <List.Item.Meta\r\n                                    className={'item-value'}\r\n                                    title={item.author}\r\n                                    description={item.contentSnippet}\r\n                                />\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                </div>\r\n                <div className={\"list-tucao \"+tucaoShow}>\r\n                    <List\r\n                        itemLayout=\"horizontal\"\r\n                        dataSource={tucao}\r\n                        renderItem={item => (\r\n                            <List.Item>\r\n                                <List.Item.Meta\r\n                                    className={'item-value'}\r\n                                    title={item.comment_author}\r\n                                    description={item.comment_content}\r\n                                />\r\n                            </List.Item>\r\n                        )}\r\n                    />\r\n                </div>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Content;\r\n","import './App.css';\r\nimport Header from \"../common/components/header\";\r\nimport Content from \"./components/content\";\r\nimport {useEffect} from \"react\";\r\n\r\nfunction App() {\r\n\r\n\r\n  return (\r\n      <div className={'page'}>\r\n        <Header />\r\n        <Content />\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\r\n\r\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './index/App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById('root') as HTMLElement);\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}